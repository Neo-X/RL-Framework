# Base container that includes all dependencies but not the actual repo

ARG UBUNTU_VERSION=16.04
ARG ARCH=
ARG CUDA=10.0

FROM nvidia/cudagl${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION} as base
# ARCH and CUDA are specified again because the FROM directive resets ARGs
# (but their default value is retained if set previously)

ARG UBUNTU_VERSION
ARG ARCH
ARG CUDA
ARG CUDNN=7.6.5.32-1

SHELL ["/bin/bash", "-c"]


ENV DEBIAN_FRONTEND="noninteractive"
# See http://bugs.python.org/issue19846
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH

# install anaconda
RUN apt-get update --fix-missing && apt-get install -y wget bzip2 ca-certificates \
    libglib2.0-0 libxext6 libsm6 libxrender1 \
    git mercurial subversion
    
# NOTE: we don't use TF so might not need some of these
# ========== Tensorflow dependencies ==========
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        cuda-command-line-tools-${CUDA/./-} \
        cuda-cublas-${CUDA/./-} \
        cuda-cufft-${CUDA/./-} \
        cuda-curand-${CUDA/./-} \
        cuda-cusolver-${CUDA/./-} \
        cuda-cusparse-${CUDA/./-} \
        curl \
        libcudnn7=${CUDNN}+cuda${CUDA} \
        libfreetype6-dev \
        libhdf5-serial-dev \
        libzmq3-dev \
        pkg-config \
        software-properties-common \
        zip \
        unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN [ ${ARCH} = ppc64le ] || (apt-get update && \
        apt-get install nvinfer-runtime-trt-repo-ubuntu${UBUNTU_VERSION/./}-5.0.2-ga-cuda${CUDA} \
        && apt-get update \
        && apt-get install -y --no-install-recommends libnvinfer5=5.0.2-1+cuda${CUDA} \
        && apt-get clean \
        && rm -rf /var/lib/apt/lists/*)

# For CUDA profiling, TensorFlow requires CUPTI.
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH

RUN apt-get update -y
# RUN apt-get install -y python3-dev python3-pip
RUN apt-get update --fix-missing
RUN apt-get install -y wget bzip2 ca-certificates git vim
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        build-essential \
        premake4 \
        git \
        curl \
        vim \
        libav-tools \
# 	      libgl1-mesa-dev \
# 	      libgl1-mesa-glx \
# 	      libosmesa6-dev \
# 	      libxrender-dev \
	    libsm6 libxext6 \
        unzip \
        patchelf \
        ffmpeg \
        graphviz \
#         libxrandr2 \
#         libxinerama1 \
#         libxcursor1 \
        python3-dev python3-pip graphviz
#         freeglut3-dev libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev libglew1.6-dev mesa-utils
        
# Not sure why this is needed
ENV LANG C.UTF-8

# Not sure what this is fixing
# COPY ./files/Xdummy /usr/local/bin/Xdummy
# RUN chmod +x /usr/local/bin/Xdummy
        
ENV PATH /opt/conda/bin:$PATH
RUN wget --quiet https://repo.anaconda.com/archive/Anaconda2-2019.10-Linux-x86_64.sh -O /tmp/miniconda.sh && \
    /bin/bash /tmp/miniconda.sh -b -p /opt/conda && \
    rm /tmp/miniconda.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> /etc/bash.bashrc

RUN conda update -y --name base conda && conda clean --all -y

RUN conda create --name rlframe python=3.6.9 pip
RUN echo "source activate rlframe" >> ~/.bashrc

ENV PATH /opt/conda/envs/rlframe/bin:$PATH

# RUN python -c 'import mujoco_py'

RUN mkdir /root/playground
WORKDIR /root/playground

# make sure your domain is accepted
RUN mkdir /root/.ssh/
RUN echo "" >> /root/.ssh/known_hosts
# RUN touch /root/.ssh/known_hosts
RUN ssh-keyscan github.com >> /root/.ssh/known_hosts

### Add OpenGL libraries to LD path.
# COPY libOpenGL.so /usr/lib/nvidia/libOpenGL.so
# ENV LD_LIBRARY_PATH /usr/lib/nvidia:${LD_LIBRARY_PATH}

COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        git 

RUN ls       
RUN pip install pybullet


RUN ls -ls
WORKDIR /opt/
# RUN git clone git@github.com:Neo-X/TerrainRLSim.git
RUN git clone https://github.com/Neo-X/TerrainRLSim.git
ENV TERRAINRL_PATH /opt/TerrainRLSim
WORKDIR /opt/TerrainRLSim
RUN wget https://github.com/UBCMOCCA/TerrainRLSim/releases/download/0.8/TerrainRLSim_external_June_21_2019.tar.xz
RUN tar -xvf TerrainRLSim_external_June_21_2019.tar.xz
RUN chmod +x ./deb_deps.sh
RUN ./deb_deps_nogl.sh
RUN cd external/caffe && make clean && make -j 8
RUN cp -r external/caffe/build/lib . && cp external/caffe/build/lib/libcaffe.* lib/ && cp external/Bullet/bin/*.so lib/ && cp external/jsoncpp/build/debug/src/lib_json/*.so* lib/
WORKDIR /opt/TerrainRLSim/simAdapter
RUN chmod +x ./gen_swig.sh
RUN ./gen_swig.sh
WORKDIR /opt/TerrainRLSim/
RUN ls -la
RUN git pull origin master
RUN chmod +x ./premake4_linux 
# RUN ./premake4_linux gmake
RUN ./premake4_linux --file=premake4_openglES.lua gmake
### RUN cd gmake 
WORKDIR /opt/TerrainRLSim/gmake
RUN make config=release64 -j 8
WORKDIR /opt/TerrainRLSim
RUN pip install -v -e $TERRAINRL_PATH
RUN pip install -r requirements.txt
RUN ls
WORKDIR /opt/
RUN echo $LD_LIBRARY_PATH

