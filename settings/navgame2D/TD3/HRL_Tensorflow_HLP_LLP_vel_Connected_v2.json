{
    "comment__": "Type of model/network to use for the actor and critic",
"model_type": "model.DeepNNKerasAdaptive.DeepNNKerasAdaptive",
    "comment__": "Learning algorithm to use",
"agent_name": "algorithm.TD3_KERAS.TD3_KERAS",
    "comment__": "Folder to store the training data in.",
"data_folder": "NavGameHRL2D_NoVision_HRL_HLC_v1/_hlp_llc_connected_6",
	"comment__": "initial probability of selecting a random action",
"epsilon": 1.0, 
	"comment__": "initial probability of selecting a discrete random action",
"omega": 0.00,
    "comment__": "Batch size used for learning",
"batch_size": 64,
    "comment__": "Learning rate for the actor/policy",
"learning_rate": 0.00001,
    "comment__": "Config file for the simulator",
"sim_config_file": "NavGameHRL2D_NoVision_HRL_HLC_v1",
    "comment__": "Exploration distance use when randomly generating new actions",
"exploration_rate": [0.1,0.2],
    "comment__": "Number of rounds to perform before termination",
"rounds": 100,
    "comment__": "Number of epochs to perform per round",
"epochs": 4,
    "comment__": "Number of epoch/episode to evaluate the policy over",
"eval_epochs": 32,
    "comment__": "Discount factor used during learning",
"discount_factor": 0.95,
    "comment__": "Should the training be plotted during learning",
"visualize_learning": true,
    "comment__": "Whether or not to save the plotted data while learning",
"save_trainData": true,
    "comment__": "Whether or not to train a forward dynamics model as well",
"train_forward_dynamics": false,
    "comment__": "Bounds used for scaling rewards for networks",
"reward_bounds": [[[0.0],[1.0]],
					[[-5.0],[0.0]]],
    "comment__": "Max length of the Experience memory",
"experience_length": [5000, 20000],
    "comment__": "Possible state bounds to be used for scaling states for networks",
"state_bounds": [
  				  [[-1.08073413, -1.544791,   -10.0, -10.0, -1.08073413, -1.544791,   -10.0, -10.0],
				 [ 1.11802318,  0.73305066,    10.0,  10.0,  1.11802318,  0.73305066,    10.0,  10.0]], 
				  [[-1.08073413, -1.544791,   -10.0, -10.0],
				 [ 1.11802318,  0.73305066,    10.0,  10.0]]
				],
    "comment__": "Action scaling values to be used to scale values for the network",
"action_bounds": [[[-1.0, -1.0],
                  [  1.0,  1.0]],
                  [[-0.2, -0.2],
                   [ 0.2,  0.2]]],
    "comment__": "Set of discrete actions that can be sampled from",				     
"discrete_actions": [[-0.92, 0.8],
                    [0.02, 0.0],
                    [0.3, 0.5],
                    [-0.4, 0.2],
                    [0.8, -0.9],
                    [-0.7, 0.0], 
                    [0.7, -0.6],
                    [-0.5, 0.4],
                    [-0.2, 0.2]],
    "comment__": "Is action space continuous or discrete?",
"action_space_continuous":true,
    "comment__": "Should the method train on the validation set only",
"train_on_validation_set":false,
    "comment__": "Name of the type of simulator to use",
"environment_type": "RLSimulations",
    "comment__": "Model type to use for the forward dynamics model",
"forward_dynamics_predictor": "network",
    "comment__": "Method to be used for the forward dynamics model is the model types uses a simulator",
"sampling_method": "SequentialMC",
    "comment__": "Use the action suggested by the policy to start the sampling method.",
"use_actor_policy_action_suggestion": true,
    "comment__": "If selecting from a uniform distribution the number of regularly distant samples to take / action dimension",
"num_uniform_action_samples": 3,
    "comment__": "Number of steps ahead the actions should be sampled",
"look_ahead_planning_steps": 2,
    "comment__": "How often to update the training data and plots wrt # of rounds",
"plotting_update_freq_num_rounds": 1,
    "comment__": "How often to save the training data and plotting data",
"saving_update_freq_num_rounds": 10,
    "comment__": "Number of treads that can be run in parallel during training",
"num_available_threads": 4,
    "comment__": "Length of the queues used to pass simulation data between the simulation workers and the learning agent(s).",
"queue_size_limit": 100,
    "comment__": "Number of actions performed between training updates",
"sim_action_per_training_update": 8,
    "comment__": "Number of rounds of adaptive sampling",
"adaptive_samples": 5,
    "comment__": "Number of elite adaptive samples to keep between adaptive sampling rounds",
"num_adaptive_samples_to_keep": 50,
    "comment__": "Use the variance calculated from the policy network (calculated using dropout)",
"use_actor_policy_action_variance_suggestion": false,
    "comment__": "Method used for action exploration [gaussian_random|OrnsteinUhlenbeck]",
"exploration_method": "gaussian_random",
    "comment__": "Amount of dropout to use in the networks (if using a dropout network)",
"dropout_p": 0.0,
    "comment__": "Regularization weight for the policy network",
"regularization_weight": 0.00001,
    "comment__": "Some parameter for rmsprop stocastic gradient optimization method.",
"rho": 0.95,
    "comment__": "Some parameter for rmsprop stocastic gradient optimization method.",
"rms_epsilon": 0.000001,
    "comment__": "Number of training updates before the target network is updated",
"steps_until_target_network_update": 1000000000,
    "comment__": "Initial factor epsilon in multiplied by (This value will slowly be reduced during training)",
"epsilon_annealing": 0.8,
    "comment__": "Different ways of calculating the scaling method used normalize the input and outputs of the network from the bootstrapping samples. minmax, input and output are -mean/max-min. variance, input and output are -mean/(std*2), given, use the bounds provided in this file",
"state_normalization": "given",
    "comment__": "load a pretrained model for the controller",
"load_saved_model": false,
	"comment__": "Number of updates the critic should perform per actor update",
"critic_updates_per_actor_update": 4,
    "comment__": "weather or not to clamp actions to stay inside the action boundaries",
"clamp_actions_to_stay_inside_bounds": false,
    "comment__": "Number of initial actions to sample before calculating input/output scaling and starting to train.",
"bootstrap_samples": 0,
    "comment__": "What method to use to select actions during bootstrapping",
"bootsrap_with_discrete_policy": false,
    "comment__": "That max number of action that can be take before the end of an episode/epoch",
"max_epoch_length": 512,
    "comment__": "If reward is below this bound it will not be put in the Experience Buffer",
"reward_lower_bound": -10.5,
    "comment__": "Enable guided policy search. Uses MCMC sampling ahead in time to select the best action to keep",
"use_guided_policy_search" : false,
    "comment__": "The number of training updates to perform for every action that is simulated",
"training_updates_per_sim_action": 1,
    "comment__": "Use The forward dynamics simulator as a way of sampling suggested actions for exploration",
"use_sampling_exploration": false,
    "comment__": "Use the forward dyanmics model to perform action exploration wrt to V -> fd > delta Action gradients",
"use_model_based_action_optimization": true,
    "comment__": "Flag for policy evaluation to swap in the task network from one model and the character/robot network from another",
"use_transfer_task_network": false,
    "comment__": "Add a large cost to actions that are suggested to be outside the action bounds.",
"penalize_actions_outside_bounds": false,
    "comment__": "Network type to use for the forward dynamics model",
"forward_dynamics_model_type": "model.ForwardDynamicsDenseNetworkDropoutTesting.ForwardDynamicsDenseNetworkDropoutTesting",
    "comment__": "Whether or not to save the Experience memory after bootstrapping",
"save_experience_memory": false,
    "comment__": "Whether or not to train the policy and critic?",
"train_rl_learning": true,
    "comment__": "Force the character to start each new action in a good state, close to a good solution",
"use_back_on_track_forcing": false,
    "comment__": "draw/render the next state suggested by the forward dynamics model",
"visualize_forward_dynamics": false,
    "comment__": "Learning rate for the forward dynamics model",
"fd_learning_rate": 0.001,
    "comment__": "Whether or not to train the policy. Used for debugging",
"train_actor": true,
    "comment__": "Plot the terms for the critic as well (regularization and td error)",
"debug_critic": false,
    "comment__": "critic regularization weight",
"critic_regularization_weight": 0.00001,
    "comment__": "Critic learning rate",
"critic_learning_rate": 0.0001,
    "comment__": "During evaluation plot of value function",
"visualize_expected_value": true,
    "comment__": "exponential decay value for use in reward function",
"target_velocity_decay":-2.0,
    "comment__": "Target velocity for controller",
"target_velocity":0.0,
    "comment__": "Number of terrain features for which convolutinoal filters should be used",
"num_terrain_features": 0,
	"comment__": "Data ordering format for convolutions",
"image_data_format": "channels_first",
    "comment__": "Initial temperature for anealling of e-greedy exploration",
"initial_temperature": 2.0,
    "comment__": "epsilon lower limit",
"min_epsilon": 0.10,
    "comment__": "Whether or not to draw/render the simulation",
"shouldRender": false,
    "comment__": "Learning rate use for model based action exploration",
"action_learning_rate": 0.5,
    "comment__": "During model-based action exloration, Probability of a random action being generated from MBAE,",
"model_based_action_omega": 0.20,
	"comment__": "visualize the loss and regularization cost of the actor. Warning: might use a lot of memory",
"debug_actor": false,
	"comment__": "float type to use, if for example you want to train on the GPU use float32",
"float_type": "float32",
	"comment__": "What processor type to perform the training on [cpu|gpu]",
"training_processor_type": "cpu",
	"comment__": "optimizer is the type of optimization algorithm to use",
"optimizer": "adam",
	"comment__": "This setting uses a sampling method overtop of simulation",
"use_simulation_sampling": false,
	"comment__": "Variance scaling used for sampling",
"variance_scalling": 0.1,
	"comment__": "Whether or not to parameterize the control via the reward function, also adds parameters to input state",
"use_parameterized_control": false,
	"comment__": "parameter bounds for parameterized controller",
"controller_parameter_settings": {
		"velocity_bounds": [[0.5],[2.5]]
		},
	"comment__": "The parameter used to control the average change in the control parameters",
"average_parameter_change": 0.25,
	"comment__": "Whether or not to train the value function some output from the forward dynamics",
"train_critic_on_fd_output": true,
	"comment__": "Use to add an additional regularization term to prevent the network from moving to far from its previous values",
"use_previous_value_regularization": false,
	"comment__": "Controls the level of information that is printed to the terminal",
"print_level": "train",
	"comment__": "print level descriptions",
"print_levels": {
		"debug": 1,
		"train": 0,
		"hyper_train": -1,
		"testing_sim": -2
		},
	"comment__": "The type of function to apply over the controller target values [gaussian|abs]",
"reward_smoother": "gaussian",
	"comment__": "Weights for different components of the reward function",
"controller_reward_weights": {
		"velocity": 0.8,
		"torque": 0.05,
		"root_height": 0.05,
		"root_pitch": 0.1,
		"right_hand_x_pos": 0.0
		},
	"comment__": "Regularization weight for different between policy parameters and old policy parameters",
"previous_value_regularization_weight":  0.01,
	"comment__": "Random seed value for the simulation to use",
"random_seed": 1234,
	"comment__": "KL divergence threshold between policy updates",
"kl_divergence_threshold": 0.25,
	"comment__": "Makes a few changes to the flow of control in order for things to be on policy [true|fast]",
"on_policy": true,
	"comment__": "Whether or not to use a stochastic policy, This adds more outputs to the network and changes the way actions are sampled",
"use_stochastic_policy": false,
	"comment__": "Whether or  not to train the critic at all. Usually used for debugging",
"train_critic": true,
	"comment__": "What type of regularization to use",
"regularization_type": "kl",
	"comment__": "Whether or not to collects tuples in batches, this can be good for multi-threading or computing furture discounted reward",
"collect_tuples_in_batches":false,
	"comment__": "Whether or not the controller should be reset to a new epoch when a fall (fallen into some kind of non-recoverable state) has occured",
"reset_on_fall": true,
	"comment__": "Whether a model of the reward r <- R(s,a) should be trained",
"train_reward_predictor": true,
	"comment__": "How many gradient steps model based action exploration should take",
"num_mbae_steps": 1,
    "comment__": "Whether or not the actor buffer should be fixed to process batches of a certain size",
"fix_actor_batch_size": true,
	"comment__": "Whether or not to put MBAE on the annelling schedule",
"anneal_mbae": true,
	"comment__": "The number of critic updates that are done between every dyna update step.",
"dyna_update_lag_steps": 5,
	"comment__": "Use generalized advantage estimation",
"use_GAE": true,
	"comment__": "generalized advantage estimation lambda in [0,1], when =0, this is just a one step return (lots of bias), when =1, use only data no variance reduction",
"GAE_lambda": 0.8,
	"comment__": "Whether or not to take a couple of on policy updates",
"use_multiple_policy_updates": false,	
	"comment__": "Whether or not to clear the experience memory after each update is done, for pure on policy methods",
"clear_exp_mem_on_poli": false,
	"comment__": "Using a single network for all functions",
"use_single_network": false,
	"comment__": "Disable scaling for inputs and outputs of networks",
"disable_parameter_scaling": false,
	"comment__": "Train a state encoding as well.",
"train_state_encoding": false,
	"comment__": "std entropy weight to help encourage exploration",
"std_entropy_weight": 0.01,
	"comment__": "policy loss function weight, to help balance policy loss vs value function loss",
"policy_loss_weight": 1.0,
	"comment__": "number of on policy F to perform per epoch",
"num_on_policy_rollouts": 8,
	"comment__": "Don't weight policy updates wrt the advantage of the action",
"dont_use_advantage": false,
	"comment__": "PPO should use seperate networks for the value and policy functions",
"use_random_actions_for_MBAE": false,
	"comment__": "Only use exploratory actions to update the policy",
"only_use_exp_actions_for_poli_updates": true,
	"comment__": "Multiply the MBAE action by a sample from a uniform distribution, to allow the action to vary in magnitude",
"randomize_MBAE_action_length": true,
	"comment__": "Load a saved and pre-trained forward dynamics model",
"load_saved_fd_model": false,
	"comment__": "Use json network description",
"network_description_type": "json",
	"comment__": "A list describing the size of the layers for the NN",
"critic_network_layer_sizes": [[
								{"layer_type": "Dense", "units": 128, "use_bias": true},
								{"layer_type": "activation", "activation_type": "leaky_rectify" },
								{"layer_type": "Input", "shape": ["none", 2], "flag": "action"},
								{"layer_type": "integrate_actor_part"},
								{"layer_type": "Dropout", "rate": 0.2},
								{"layer_type": "Dense", "units": 64, "use_bias": true},
								{"layer_type": "activation", "activation_type": "leaky_rectify" },
								{"layer_type": "Dropout", "rate": 0.2}
								],
								[  
								{"layer_type": "Dense", "units": 128, "use_bias": true},
								{"layer_type": "activation", "activation_type": "leaky_rectify" },
								{"layer_type": "integrate_actor_part"},
								{"layer_type": "Dropout", "rate": 0.2},
								{"layer_type": "Dense", "units": 64, "use_bias": true},
								{"layer_type": "activation", "activation_type": "leaky_rectify" },
								{"layer_type": "Dropout", "rate": 0.2}
								]
								],
	"comment__": "A list describing the size of the layers for the NN",
"policy_network_layer_sizes": [[ 
								{"layer_type": "slice", "slice_index": 4, "slice_label": "llp_state"},
								{"layer_type": "Dense", "units": 128, "use_bias": true},
								{"layer_type": "activation", "activation_type": "leaky_rectify" },
								{"layer_type": "Dense", "units": 64, "use_bias": true},
								{"layer_type": "activation", "activation_type": "leaky_rectify" }
								],[ 
								{"layer_type": "Dense", "units": 64, "use_bias": true},
								{"layer_type": "activation", "activation_type": "leaky_rectify" },
								{"layer_type": "Dense", "units": 32, "use_bias": true},
								{"layer_type": "activation", "activation_type": "leaky_rectify" }
								]],
	"comment__": "Activation function to use for the std part of the policy",
"_last_std_policy_layer_activation_type": "sigmoid",
	"comment__": "type of activation to use",
"activation_type": "tanh",
	"comment__": "last policy type of activation to use",
"last_policy_layer_activation_type": "tanh",
	"comment__": "type of activation to use for policy",
"policy_activation_type": "tanh",
	"comment__": "Normalize the advantage used for gradient calculations wrt the discount factor and scale of reward",
"normalize_advantage": true,
	"comment__": "use a special annealing schedule that will begin at 1 and end at 0",
"annealing_schedule": "log",
	"comment__": "Use the annealing schedule in on policy learning",
"anneal_on_policy": true,
	"comment__": "Use a different off-policy experience memory for the fd learning",
"keep_seperate_fd_exp_buffer": false,
	"comment__": "Train a GAN to do something....",
"train_gan": false,
	"comment__": "Train GAN with gaussian noise",
"train_gan_with_gaussian_noise": true,
	"comment__": "This overrides all of the envs to be a single one from the list of sim environments",
"override_sim_env_id": false,
	"comment__": "Prevents the critic from including MBAE actions in it's policy estimation.",
"give_mbae_actions_to_critic": true,
	"comment__": "Train an extra value function just for MBAE",
"train_extra_value_function": true,
	"comment__": "The interpolation parameter used adjust the target network for DDPG",
"target_net_interp_weight": 0.01,
	"comment__": "Batch size for the value function network",
"value_function_batch_size": 64,
	"comment__": "Train the critic off of the data stored in the exp for the fd model",
"train_critic_with_fd_data": true,
	"comment__": "Additional on-policy training updates",
"additional_on_policy_training_updates": [1.0, 1.0],
	"comment__": "Use average of policy std as mbae learning rate",
"use_std_avg_as_mbae_learning_rate": true,
	"comment__": "Use the on-policy value function to compute state gradients instead of off-policy one for SMBAE.",
"use_extra_value_for_MBAE_state_grads": true,
	"comment__": "Use advantage estimate instead of critic for selecting good actions to learn from CACLA",
"CACLA_use_advantage": false,
	"comment__": "Performs MBAE random sampling at the level of episodes instead of transitions",
"perform_mbae_episode_sampling": false,
	"comment__": "Performs MBAE random sampling at the level of episodes instead of transitions",
"perform_mbae_episode_sampling": false,
	"comment__": "If already annealing on-policy then enabling this will anneal the std for the policy",
"anneal_policy_std": true,
	"comment__": "anneal the probability of performing explorative actions, set to >= 1.0 to perform only exploration actions",
"anneal_exploration": 0.5,
	"comment__": "Which backend to use for keras [theano|tensorflow]",
"learning_backend": "tensorflow",
	"comment__": "Perform multi agent training using different policies, number of agents",
"perform_multiagent_training": 2,
	"comment__": "Use a centralized critics (each one kind of has full information)",
"use_centralized_critic": false,
	"comment__": "Ignore training some of the agents in a multi agent sim",
"ignore_MRL_agents": [],
	"comment__": "The index of the multiagent simulation for the hlc",
"llc_index": 1,
	"comment__": "higher level controller timestep",
"hlc_timestep": 1,
	"comment__": "The index of the multiagent simulation for the hlc",
"hlc_index": 0,
	"comment__": "Describes the policy links for training, give a to b",
"policy_connections": [[1,0]],
	"comment__": "Agent names",
"agent_names": ["HLP", "LLP"],
	"comment__": "the first index of the goal in the state",
"goal_slice_index": 2,
	"comment__": "the length of the llp observations",
"state_split_index": 4,
	"comment__": "Boolean to use HER or not",
"use_hindsight_relabeling": [false],
	"comment__": "Do something odd with the policy...",
"skip_policy_training": false,
	"comment__": "Do something odd with the state... This should be HLP state length + (llp state length * hlp timestep)",
"use_hack_state_trans": 8,
	"comment__": "Use the internal HRL logic that allows the learning code to add sub-goals",
"use_hrl_logic": true,
	"comment__": "The original size of the HLP state",
"orig_hlp_state_size": 4
}